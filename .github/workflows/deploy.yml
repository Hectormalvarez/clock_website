name: Deploy to AWS

on:
  push:
    branches:
      - dev # Triggers the workflow on push events to the dev branch
  pull_request:
    types: [closed]
    branches:
      - main # Triggers on PR close to main

jobs:
  deploy_dev:
    name: Deploy to Development
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev' # Ensure this job only runs for pushes to dev
    runs-on: ubuntu-latest
    # environment: development # Optional: configure a GitHub environment named "development"
    permissions:
      id-token: write # Required for OIDC if you choose to use it
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Build Vite application
        run: npm run build
        env:
          VITE_ENVIRONMENT: development # Explicitly set for clarity, though build often defaults to 'development' if not 'production'
          VITE_AWS_DOMAIN_NAME_DEV: ${{ secrets.AWS_DOMAIN_NAME_DEV }}
          VITE_AWS_BASE_DOMAIN_DEV: ${{ secrets.AWS_BASE_DOMAIN_DEV }}
          VITE_AWS_HOSTED_ZONE_ID_DEV: ${{ secrets.AWS_HOSTED_ZONE_ID_DEV }}

      - name: Compile CDK TypeScript
        run: npx tsc

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
            role-session-name: ${{ secrets.ROLE_SESSION_NAME }}
            aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CDK Stack (Development)
        run: npm run cdk -- deploy --all -c environment=development --require-approval never
        env:
          CI: true
          AWS_DOMAIN_NAME_DEV: ${{ secrets.AWS_DOMAIN_NAME_DEV }}
          AWS_BASE_DOMAIN_DEV: ${{ secrets.AWS_BASE_DOMAIN_DEV }}
          AWS_HOSTED_ZONE_ID_DEV: ${{ secrets.AWS_HOSTED_ZONE_ID_DEV }}

  deploy_prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # environment: production # Optional: configure a GitHub environment named "production"
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.ref == 'refs/heads/main'
    # The condition above ensures this job only runs when a PR is merged into the main branch.
    # Note: github.ref in the context of a pull_request event for 'closed' points to the base branch (e.g., refs/heads/main).

    permissions:
      id-token: write # Required for OIDC if you choose to use it
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main # Ensure we check out the main branch after merge

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test # It's good practice to run tests before deploying to production

      - name: Build Vite application
        run: npm run build
        env:
          VITE_ENVIRONMENT: production
          VITE_AWS_DOMAIN_NAME_PROD: ${{ secrets.AWS_DOMAIN_NAME_PROD }}
          VITE_AWS_BASE_DOMAIN_PROD: ${{ secrets.AWS_BASE_DOMAIN_PROD }}
          VITE_AWS_HOSTED_ZONE_ID_PROD: ${{ secrets.AWS_HOSTED_ZONE_ID_PROD }}

      - name: Compile CDK TypeScript
        run: npx tsc

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
            role-session-name: ${{ secrets.ROLE_SESSION_NAME }}
            aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CDK Stack (Production)
        run: npm run cdk -- deploy --all -c environment=production --require-approval never
        env:
          CI: true
          AWS_DOMAIN_NAME_PROD: ${{ secrets.AWS_DOMAIN_NAME_PROD }}
          AWS_BASE_DOMAIN_PROD: ${{ secrets.AWS_BASE_DOMAIN_PROD }}
          AWS_HOSTED_ZONE_ID_PROD: ${{ secrets.AWS_HOSTED_ZONE_ID_PROD }}
